@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />
    <style>
        body {
            height: 100vh;
            display: flex;
            margin: 0;
            background: #f8f9fa; /* màu nền sáng */
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        /* Sidebar */
        .sidebar {
            width: 250px;
            background: #1abc9c; /* xanh ngọc */
            color: #fff;
            padding-top: 20px;
            flex-shrink: 0;
            box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        }

            .sidebar h3 {
                color: #fff;
                text-align: center;
                margin-bottom: 20px;
                font-weight: bold;
            }

            .sidebar a {
                display: block;
                color: #ecf0f1;
                padding: 12px 20px;
                text-decoration: none;
                font-size: 15px;
                transition: 0.3s;
            }

                .sidebar a:hover {
                    background: #16a085; /* xanh đậm hơn khi hover */
                    color: #fff;
                    padding-left: 25px; /* hiệu ứng trượt nhẹ */
                }

        /* Main */
        .main {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }

        /* Navbar */
        .navbar {
            flex-shrink: 0;
            background: #34495e !important; /* xanh ghi đậm */
        }

            .navbar .navbar-brand {
                font-weight: bold;
                color: #ecf0f1 !important;
            }

        /* Content */
        .content {
            flex-grow: 1;
            padding: 20px;
            overflow-y: auto;
            background: #ffffff; /* nền trắng tinh */
            border-top: 1px solid #eaeaea;
        }

        /* Badge thông báo */
        #notificationCount {
            font-size: 0.75rem;
            padding: 3px 6px;
        }
    </style>

</head>
<body>
    <!-- Sidebar bên trái -->
    <div class="sidebar">
        <h3>Bảng điều khiển</h3>
        <a asp-controller="AdminDashboard" asp-action="Index"><i class="bi bi-house"></i> Trang chính</a>
        <a asp-controller="Products" asp-action="Index"><i class="bi bi-box"></i> Quản lý sản phẩm</a>
        <a asp-controller="Categories" asp-action="Index"><i class="bi bi-folder"></i> Quản lý danh mục</a>
        <a asp-controller="Orders" asp-action="Index"><i class="bi bi-receipt"></i> Quản lý đơn hàng</a>
        <a asp-controller="Users" asp-action="Index"><i class="bi bi-person"></i> Quản lý người dùng</a>
        <a asp-controller="Manufacturers" asp-action="Index"><i class="bi bi-tags"></i> Quản lý hãng SX</a>
        <a asp-controller="Admin" asp-action="Index"><i class="bi bi-lock"></i> Quản lý admin</a>
        <a asp-controller="Orders" asp-action="RevenueReport"><i class="bi bi-graph-up"></i> Quản lý doanh thu</a>
        <a asp-controller="Reviews" asp-action="Index"><i class="bi bi-chat-dots"></i> Quản lý bình luận</a>
        <a asp-controller="Vouchers" asp-action="Index"><i class="bi bi-gift"></i> Quản lý voucher</a>
        <a asp-controller="Contact" asp-action="Admin"><i class="bi bi-envelope"></i> Quản lý liên hệ</a>
    </div>

    <!-- Main -->
    <div class="main">
        <!-- Navbar -->
        <nav class="navbar navbar-dark bg-dark px-3">
            <a class="navbar-brand" href="/AdminDashboard">Admin</a>
            <div class="d-flex ms-auto align-items-center">
                <!-- Thông báo -->
                <div class="dropdown me-3">
                    <a class="text-white position-relative" href="#" id="notificationDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="bi bi-bell" style="font-size: 1.4rem;"></i>
                        <span id="notificationCount" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger d-none">0</span>
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="notificationDropdown" style="width: 300px; max-height: 400px; overflow-y: auto;">
                        <li><h6 class="dropdown-header">Thông báo</h6></li>
                        <li id="notificationList">
                            <span class="dropdown-item-text text-muted">Chưa có thông báo</span>
                        </li>

                    </ul>
                </div>
                <a href="/Login/Logout" class="btn btn-outline-light btn-sm"><i class="bi bi-box-arrow-right"></i> Đăng xuất</a>
            </div>
        </nav>

        <!-- Nội dung -->
        <div class="content">
            @RenderBody()
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
                const notificationList = document.getElementById('notificationList');
        const notificationCount = document.getElementById('notificationCount');

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleString('vi-VN', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        async function loadNotifications() {
            try {
                const response = await fetch('/Notifications'); // URL API
                if (!response.ok) {
                    console.error('Lỗi load thông báo, status:', response.status);
                    return;
                }

                const text = await response.text();
                if (!text) {
                    notificationList.innerHTML = `<span class="dropdown-item-text text-muted">Chưa có thông báo</span>`;
                    return;
                }

                const notifications = JSON.parse(text);
                const newOrders = notifications.filter(n => n.orderId > 0 && !n.isRead);

                notificationList.innerHTML = ''; // xóa cũ

                // Cập nhật badge
                if (newOrders.length > 0) {
                    notificationCount.innerText = newOrders.length;
                    notificationCount.classList.remove('d-none');
                } else {
                    notificationCount.classList.add('d-none');
                }

                if (newOrders.length === 0) {
                    notificationList.innerHTML = `<span class="dropdown-item-text text-muted">Chưa có đơn hàng mới</span>`;
                } else {
                    newOrders.forEach(notification => {
                        const li = document.createElement('li');
                        li.className = 'notification-item';
                        li.innerHTML = `
                            <a class="dropdown-item notification-link" href="${notification.link}" data-id="${notification.notificationId}">
                                <div class="notification-message">${notification.message}</div>
                                <div class="notification-time">${formatDate(notification.createdAt)}</div>
                            </a>
                        `;
                        notificationList.appendChild(li);
                    });
                }

                // Thêm nút "Đánh dấu tất cả đã xem" và "Xem tất cả"
                const liActions = document.createElement('li');
                liActions.innerHTML = `
                    <hr class="dropdown-divider">
                    <div class="d-flex justify-content-between px-2">
                        <button id="markAllReadBtn" class="btn btn-sm btn-outline-primary">Đánh dấu tất cả đã xem</button>
                        <a class="btn btn-sm btn-outline-secondary" href="/Orders">Xem tất cả</a>
                    </div>
                `;
                notificationList.appendChild(liActions);

            } catch (err) {
                console.error('Lỗi load thông báo:', err);
            }
        }

        // Click vào 1 thông báo
        notificationList.addEventListener('click', async function (e) {
            const link = e.target.closest('.notification-link');
            if (link) {
                e.preventDefault();
                const notiId = link.getAttribute('data-id');

                try {
                    const response = await fetch(`/Notifications/MarkAsRead/${notiId}`, { method: "POST" });
                    if (response.ok) {
                        link.closest('li').remove();
                        let count = parseInt(notificationCount.innerText) || 0;
                        notificationCount.innerText = count > 0 ? count - 1 : 0;
                        if (parseInt(notificationCount.innerText) === 0) notificationCount.classList.add('d-none');
                    }
                } catch (err) {
                    console.error("Lỗi khi đánh dấu đã đọc:", err);
                }

                window.location.href = link.getAttribute('href');
            }

            // Click nút "Đánh dấu tất cả đã xem"
            if (e.target.id === "markAllReadBtn") {
                e.preventDefault();
                try {
                    const response = await fetch('/Notifications/MarkAllAsRead', { method: "POST" });
                    if (response.ok) {
                        // Xóa tất cả item thông báo
                        notificationList.querySelectorAll('.notification-item').forEach(li => li.remove());
                        notificationCount.innerText = "0";
                        notificationCount.classList.add('d-none');
                    }
                } catch (err) {
                    console.error("Lỗi khi đánh dấu tất cả:", err);
                }
            }
        });

        // SignalR realtime
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub")
            .withAutomaticReconnect()
            .build();

        connection.on("ReceiveOrderNotification", (message, orderId) => {
            let count = parseInt(notificationCount.innerText) || 0;
            notificationCount.innerText = count + 1;
            notificationCount.classList.remove('d-none');

            const li = document.createElement('li');
            li.className = 'notification-item';
            li.innerHTML = `
                <a class="dropdown-item notification-link" href="/Admin/Orders/Details/${orderId}" data-id="0">
                    <div class="notification-message">${message}</div>
                    <div class="notification-time">${formatDate(new Date())}</div>
                </a>
            `;
            notificationList.insertBefore(li, notificationList.firstChild);
        });

        connection.start().then(() => {
            console.log("✅ SignalR connected");
            connection.invoke("JoinAdminGroup");
            loadNotifications();
        }).catch(err => console.error(err));



    </script>


    @RenderSection("Scripts", required: false)
</body>
</html>
