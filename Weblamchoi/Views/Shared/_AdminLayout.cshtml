<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="/css/Admindasboard.css">

    @RenderSection("Styles", required: false)
</head>

<body>
    <!-- Sidebar -->
    <div class="sidebar bg-dark text-white">
        <h4 class="fw-bold">Bảng điều khiển</h4>
        @{
            var currentController = ViewContext.RouteData.Values["controller"]?.ToString()?.ToLower();
            var currentAction = ViewContext.RouteData.Values["action"]?.ToString()?.ToLower();
        }
        <ul class="nav flex-column fw-semibold">
            <li class="nav-item mb-2">
                <a class="nav-link text-white d-flex align-items-center gap-2 @(currentController == "admindashboard" && currentAction == "index" ? "active" : "")" asp-controller="AdminDashboard" asp-action="Index">
                    <i class="bi bi-house"></i> <span>Trang chính</span>
                </a>
            </li>
            <li class="nav-item mb-2">
                <a class="nav-link text-white d-flex align-items-center gap-2 @(currentController == "products" ? "active" : "")" asp-controller="Products" asp-action="Index">
                    <i class="bi bi-box"></i> <span>Quản lý sản phẩm</span>
                </a>
            </li>
            <li class="nav-item mb-2">
                <a class="nav-link text-white d-flex align-items-center gap-2 @(currentController == "categories" ? "active" : "")" asp-controller="Categories" asp-action="Index">
                    <i class="bi bi-folder"></i> <span>Quản lý danh mục</span>
                </a>
            </li>
            <li class="nav-item mb-2">
                <a class="nav-link text-white d-flex align-items-center gap-2 @(currentController == "orders" && currentAction != "revenuereport" ? "active" : "")" asp-controller="Orders" asp-action="Index">
                    <i class="bi bi-receipt"></i> <span>Quản lý đơn hàng</span>
                </a>
            </li>
            <li class="nav-item mb-2">
                <a class="nav-link text-white d-flex align-items-center gap-2 @(currentController == "users" ? "active" : "")" asp-controller="Users" asp-action="Index">
                    <i class="bi bi-person"></i> <span>Quản lý người dùng</span>
                </a>
            </li>
            <li class="nav-item mb-2">
                <a class="nav-link text-white d-flex align-items-center gap-2 @(currentController == "manufacturers" ? "active" : "")" asp-controller="Manufacturers" asp-action="Index">
                    <i class="bi bi-tags"></i> <span>Quản lý hãng SX</span>
                </a>
            </li>
            <li class="nav-item mb-2">
                <a class="nav-link text-white d-flex align-items-center gap-2 @(currentController == "admin" ? "active" : "")" asp-controller="Admin" asp-action="Index">
                    <i class="bi bi-lock"></i> <span>Quản lý admin</span>
                </a>
            </li>
            <li class="nav-item mb-2">
                <a class="nav-link text-white d-flex align-items-center gap-2 @(currentController == "orders" && currentAction == "revenuereport" ? "active" : "")" asp-controller="Orders" asp-action="RevenueReport">
                    <i class="bi bi-graph-up"></i> <span>Quản lý doanh thu</span>
                </a>
            </li>
            <li class="nav-item mb-2">
                <a class="nav-link text-white d-flex align-items-center gap-2 @(currentController == "reviews" ? "active" : "")" asp-controller="Reviews" asp-action="Index">
                    <i class="bi bi-chat-dots"></i> <span>Quản lý bình luận</span>
                </a>
            </li>
            <li class="nav-item mb-2">
                <a class="nav-link text-white d-flex align-items-center gap-2 @(currentController == "vouchers" ? "active" : "")" asp-controller="Vouchers" asp-action="Index">
                    <i class="bi bi-gift"></i> <span>Quản lý voucher</span>
                </a>
            </li>
            <li class="nav-item mb-2">
                <a class="nav-link text-white d-flex align-items-center gap-2 @(currentController == "contact" ? "active" : "")" asp-controller="Contact" asp-action="Admin">
                    <i class="bi bi-envelope"></i> <span>Quản lý liên hệ</span>
                </a>
            </li>
        </ul>
    </div>

    <!-- Main -->
    <div class="main">

        <!-- Navbar -->
        <nav class="navbar navbar-dark bg-dark px-3">
            <a class="navbar-brand" href="/AdminDashboard">Admin</a>
            <div class="d-flex ms-auto align-items-center">
                <!-- Notification Dropdown -->
                <div class="dropdown me-3">
                    <a class="text-white position-relative" href="#" id="notificationDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="bi bi-bell" style="font-size: 1.4rem;"></i>
                        <span id="notificationCount" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger d-none">0</span>
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end shadow-sm" aria-labelledby="notificationDropdown" style="width: 300px; max-height: 400px; overflow-y: auto;">
                        <li><h6 class="dropdown-header">Thông báo</h6></li>
                        <li id="notificationList">
                            <span class="dropdown-item-text text-muted">Chưa có thông báo</span>
                        </li>
                    </ul>
                </div>
                <a class="user-dropdown-item text-danger"
                   asp-controller="Login" asp-action="Logout">
                    <i class="bi bi-box-arrow-right"></i> Đăng xuất
                </a>
            </div>
        </nav>

        <!-- Content -->
        <div class="content">
            @RenderBody()
        </div>
    </div>
    <style>
        .notification-item.read .notification-message {
            color: #6c757d;
            font-weight: normal;
        }

        .notification-item.unread .notification-message {
            color: #000;
            font-weight: bold;
        }

        .notification-link {
            text-decoration: none;
            color: inherit;
            display: block;
        }

            .notification-link:hover {
                background-color: #f8f9fa;
            }
    </style>
   
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

    <script>
        // Cấu hình chung
        const notificationList = document.getElementById('notificationList');
        const notificationCount = document.getElementById('notificationCount');

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleString('vi-VN', {
                day: '2-digit', month: '2-digit', year: 'numeric',
                hour: '2-digit', minute: '2-digit'
            });
        }

        // Load thông báo từ DB
              async function loadNotifications() {
            try {
                const response = await fetch('/api/notifications', {
                    headers: { 'Accept': 'application/json' }
                });
                if (!response.ok) throw new Error(`HTTP ${response.status}`);
                const notifications = await response.json();
                console.log('LOADED NOTIFICATIONS:', notifications); // PHẢI THẤY
                displayNotifications(notifications);
            } catch (err) {
                console.error('LOAD NOTI ERROR:', err);
                notificationList.innerHTML = `<span class="dropdown-item-text text-muted">Lỗi tải</span>`;
            }
        }

        // Hiển thị danh sách
        function displayNotifications(notifications) {
            const unreadCount = notifications.filter(n => !n.isRead).length;
            notificationList.innerHTML = '';

            if (unreadCount > 0) {
                notificationCount.textContent = unreadCount;
                notificationCount.classList.remove('d-none');
            } else {
                notificationCount.classList.add('d-none');
            }

            if (notifications.length === 0) {
                notificationList.innerHTML = `<span class="dropdown-item-text text-muted">Chưa có thông báo</span>`;
                return;
            }

            notifications.forEach(noti => {
                notificationList.appendChild(createNotificationItem(noti));
            });

            // Nút hành động
            const actionsLi = document.createElement('li');
            actionsLi.innerHTML = `
                <hr class="dropdown-divider">
                <div class="d-flex justify-content-between px-2">
                    <button id="markAllReadBtn" class="btn btn-sm btn-outline-primary">Đánh dấu tất cả</button>
                    <a class="btn btn-sm btn-outline-secondary" href="/Admin/Orders">Xem tất cả</a>
                </div>`;
            notificationList.appendChild(actionsLi);
        }

        // Tạo item thông báo
        function createNotificationItem(noti) {
            const li = document.createElement('li');
            li.className = `notification-item ${noti.isRead ? 'read' : 'unread'}`;
            li.innerHTML = `
                <a class="dropdown-item notification-link" href="${noti.link}" data-id="${noti.notificationId}">
                    <div class="notification-message">${noti.message}</div>
                    <div class="notification-time text-muted">${formatDate(noti.createdAt)}</div>
                </a>`;
            return li;
        }

        // SIGNALR: Kết nối + nhận real-time
        const connection = new signalR.HubConnectionBuilder()
            .withUrl('/notificationHub')
            .withAutomaticReconnect([0, 2000, 5000, 10000])
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // Nhận thông báo real-time
        connection.on('ReceiveOrderNotification', (message, link, notificationId) => {
            console.log('NEW NOTIFICATION:', message);

            // Tăng badge
            let count = parseInt(notificationCount.textContent) || 0;
            notificationCount.textContent = count + 1;
            notificationCount.classList.remove('d-none');

            // Tạo thông báo mới
            const newNoti = {
                notificationId,
                message,
                link,
                isRead: false,
                createdAt: new Date().toISOString()
            };

            const li = createNotificationItem(newNoti);
            notificationList.insertBefore(li, notificationList.firstChild);

            // Hiệu ứng mượt
            li.style.opacity = '0';
            li.style.transform = 'translateY(-10px)';
            setTimeout(() => {
                li.style.transition = 'all 0.3s ease';
                li.style.opacity = '1';
                li.style.transform = 'translateY(0)';
            }, 10);

            // Âm thanh (tùy chọn)
            const audio = new Audio('/sounds/notification.mp3');
            audio.play().catch(() => {});
        });

        // Bắt đầu kết nối
        connection.start()
            .then(() => {
                console.log('SignalR CONNECTED');
                loadNotifications();
                setInterval(loadNotifications, 30000); // Tự động refresh
            })
            .catch(err => {
                console.error('SignalR FAILED:', err);
            });

        // Reconnect: tự động join lại group
        connection.onreconnected(() => {
            console.log('SignalR RECONNECTED');
            loadNotifications();
        });

        // Click: đánh dấu đã đọc
        document.addEventListener('click', async (e) => {
            const link = e.target.closest('.notification-link');
            if (link) {
                e.preventDefault();
                const notiId = link.dataset.id;
                try {
                    await fetch(`/api/notifications/MarkAsRead/${notiId}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        }
                    });
                    link.closest('li').classList.replace('unread', 'read');
                    const count = parseInt(notificationCount.textContent) || 0;
                    if (count <= 1) {
                        notificationCount.classList.add('d-none');
                    } else {
                        notificationCount.textContent = count - 1;
                    }
                } catch (err) {
                    console.error('Mark read error:', err);
                }
                window.location.href = link.getAttribute('href');
            }

            if (e.target.id === 'markAllReadBtn') {
                e.preventDefault();
                try {
                    await fetch('/Users/MarkAllAsRead', { method: 'POST' });
                    document.querySelectorAll('.notification-item.unread')
                        .forEach(li => li.classList.replace('unread', 'read'));
                    notificationCount.classList.add('d-none');
                } catch (err) {
                    console.error('Mark all error:', err);
                }
            }
        });

        // Tự động load khi mở lại tab
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden) loadNotifications();
        });
    </script>
    @RenderSection("Scripts", required: false)

 
</body>
</html>
